{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Welcome To Colaboratory",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/J3dI2/20ProjecyFixed/blob/main/project%20112\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "access-control-allow-headers",
                  "accept-ranges,cache-control,content-security-policy,content-type,date,expires,last-modified,pragma,server,x-content-type-options,x-xss-protection,set-cookie,set-cookie,alt-svc"
                ],
                [
                  "content-type",
                  "application/javascript, application/json; charset=utf-8"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "UPhvJ33THv1A",
        "outputId": "26b094df-6f36-42a4-fcab-2dbb9ad19b5b"
      },
      "source": [
        "from google.colab import files\n",
        "files_to_upload = files.upload()"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-b334b7e0-1afe-4346-b34e-788f98191d99\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-b334b7e0-1afe-4346-b34e-788f98191d99\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving labels.csv to labels.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L3Cc-BtAe57B"
      },
      "source": [
        "import cv2\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.datasets import fetch_openml\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import accuracy_score"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ekSIMKHqITjR",
        "outputId": "ac785abd-adac-4f60-dfc6-e6cd1e6029c3"
      },
      "source": [
        "X, y = fetch_openml ('mnist_784' , version=1, return_X_y=True)\n",
        "print(pd.Series(y).value_counts())\n",
        "classes = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n",
        "nclasses = len(classes)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1    7877\n",
            "7    7293\n",
            "3    7141\n",
            "2    6990\n",
            "9    6958\n",
            "0    6903\n",
            "6    6876\n",
            "8    6825\n",
            "4    6824\n",
            "5    6313\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 986
        },
        "id": "sp4Ir_otJE8D",
        "outputId": "ec2e078d-c5f1-4d44-c424-7758c8dda768"
      },
      "source": [
        "samples_per_class = 5\n",
        "figure = plt.figure(figsize=(nclasses*2,(1+samples_per_class*2)))\n",
        "\n",
        "idx_cls= 0\n",
        "for cls in classes:\n",
        "  idxs = np.flatnonzero(y == cls)\n",
        "  inxs = np.random.choice(idxs, samples_per_class, replace=False)\n",
        "  i = 0\n",
        "  for idx in idxs:\n",
        "    plt_idx = i * nclasses + idx_cls + 1\n",
        "    p = plt.subplot(samples_per_class, nclasses, plt_idx);\n",
        "    p = sns.heatmap(np.reshape(X[idx], (28,28)), cmap=plt.cm.gray,\n",
        "                    xticklabels=False, yticklabels=False, cbar=False);\n",
        "    p = plt.axis('off');\n",
        "    i += 1\n",
        "  idx_cls += 1"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-18-2361670ab9c8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0midx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0midxs\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0mplt_idx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mi\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mnclasses\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0midx_cls\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0mp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msamples_per_class\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnclasses\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplt_idx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m     p = sns.heatmap(np.reshape(X[idx], (28,28)), cmap=plt.cm.gray,\n\u001b[1;32m     13\u001b[0m                     xticklabels=False, yticklabels=False, cbar=False);\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36msubplot\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1029\u001b[0m     \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgcf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1030\u001b[0;31m     \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_subplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1031\u001b[0m     \u001b[0mbbox\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbbox\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1032\u001b[0m     \u001b[0mbyebye\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/figure.py\u001b[0m in \u001b[0;36madd_subplot\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1417\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_axstack\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mremove\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1418\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1419\u001b[0;31m             \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msubplot_class_factory\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprojection_class\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1420\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1421\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_add_axes_internal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axes/_subplots.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, fig, *args, **kwargs)\u001b[0m\n\u001b[1;32m     64\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mnum\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mnum\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0mrows\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mcols\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m                     raise ValueError(\n\u001b[0;32m---> 66\u001b[0;31m                         f\"num must be 1 <= num <= {rows*cols}, not {num}\")\n\u001b[0m\u001b[1;32m     67\u001b[0m                 self._subplotspec = GridSpec(\n\u001b[1;32m     68\u001b[0m                         rows, cols, figure=self.figure)[int(num) - 1]\n",
            "\u001b[0;31mValueError\u001b[0m: num must be 1 <= num <= 50, not 51"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 1440x792 with 5 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lNi-pxjsT9ON",
        "outputId": "5f6e71ed-81b4-4c2e-ea99-f6bf3ac0a777"
      },
      "source": [
        "print(len(X))\n",
        "print(len(X[0]))"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "70000\n",
            "784\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ADjLpEtdUmYm",
        "outputId": "175cc926-00b3-47a1-b6d9-b518bb292b04"
      },
      "source": [
        "print(X[0])\n",
        "print(y[0])"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[  0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   3.  18.\n",
            "  18.  18. 126. 136. 175.  26. 166. 255. 247. 127.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.  30.  36.  94. 154. 170. 253.\n",
            " 253. 253. 253. 253. 225. 172. 253. 242. 195.  64.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.  49. 238. 253. 253. 253. 253. 253.\n",
            " 253. 253. 253. 251.  93.  82.  82.  56.  39.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.  18. 219. 253. 253. 253. 253. 253.\n",
            " 198. 182. 247. 241.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.  80. 156. 107. 253. 253. 205.\n",
            "  11.   0.  43. 154.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.  14.   1. 154. 253.  90.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0. 139. 253. 190.\n",
            "   2.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.  11. 190. 253.\n",
            "  70.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.  35. 241.\n",
            " 225. 160. 108.   1.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.  81.\n",
            " 240. 253. 253. 119.  25.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "  45. 186. 253. 253. 150.  27.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.  16.  93. 252. 253. 187.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0. 249. 253. 249.  64.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "  46. 130. 183. 253. 253. 207.   2.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.  39. 148.\n",
            " 229. 253. 253. 253. 250. 182.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.  24. 114. 221. 253.\n",
            " 253. 253. 253. 201.  78.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.  23.  66. 213. 253. 253. 253.\n",
            " 253. 198.  81.   2.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.  18. 171. 219. 253. 253. 253. 253. 195.\n",
            "  80.   9.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.  55. 172. 226. 253. 253. 253. 253. 244. 133.  11.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0. 136. 253. 253. 253. 212. 135. 132.  16.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.\n",
            "   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.]\n",
            "5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "inM8S8ceUupi"
      },
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=9, train_size=7500, test_size=2500)\n",
        "\n",
        "X_train_scaled = X_train/255.0\n",
        "X_test_scaled = X_test/255.0"
      ],
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S8pGkJaRVp2F",
        "outputId": "9fc6585c-2e29-4ca9-92ab-7a27c1808620"
      },
      "source": [
        "clf = LogisticRegression(solver='saga', multi_class='multinomial').fit(X_train_scaled, y_train)"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
            "  \"the coef_ did not converge\", ConvergenceWarning)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RIPyD5FLV-N-",
        "outputId": "5400fdf2-5e7a-4d50-820d-cff31f36afe8"
      },
      "source": [
        "y_pred = clf.predict(X_test_scaled)\n",
        "\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(accuracy)"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9004\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 606
        },
        "id": "zrGG5CJ3WL3d",
        "outputId": "b9e11a3d-57d8-448d-96b4-9fd54bb177c3"
      },
      "source": [
        "cm = pd.crosstab(y_test, y_pred, rownames=['Actual'], colnames=['Predicted'])\n",
        "\n",
        "p = plt.figure(figsize=(10,10));\n",
        "p = sns.heatmap(cm, annot=True, fmt=\"d\", cbar=False)"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x720 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}